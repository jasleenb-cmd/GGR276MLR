import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns

# Load the data
url = "/Users/jasleenbinning/PycharmProjects/Fun/GGR276MLR/ggr276mlr.csv"
df = pd.read_csv(url)

# Check for missing values and clean the data if necessary
df = df.dropna()

# Select the independent variables (features) and the dependent variable (target)
features = ['1a_government_consumption', '1b_transfers', '1c_gov_enterprises', '1d_top_marg_tax_rate', '2a_judicial_independence', '2b_impartial_courts', '2c_protection_property_rights', '2d_military_interference', '2e_integrity_legal_system', '2f_legal_enforcement_contracts', '2g_restrictions_sale_real_property', '2h_reliability_police', '2i_business_costs_crime', '3a_money_growth', '3b_std_inflation', '3c_inflation', '3d_freedom_own_foreign_currency', '4a_tariffs', '4b_regulatory_trade_barriers', '4c_black_market', '4d_control_movement_capital_ppl', '5a_credit_market_reg', '5b_labor_market_reg', '5c_business_reg']
target = 'ECONOMIC FREEDOM'

X = df[features]
y = df[target]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the multiple linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Evaluate the model on the testing set
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Mean Squared Error:", mse)
print("R-squared:", r2)

# Scatter plot of predicted vs actual values
plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred)
plt.xlabel("Actual Economic Freedom")
plt.ylabel("Predicted Economic Freedom")
plt.title("Actual vs Predicted Economic Freedom")
plt.show()

# Residual plot
residuals = y_test - y_pred
plt.figure(figsize=(8, 6))
sns.residplot(x=y_pred, y=residuals, lowess=True, scatter_kws={'s': 20, 'alpha': 0.5})
plt.xlabel("Predicted Economic Freedom")
plt.ylabel("Residuals")
plt.title("Residual Plot")
plt.show()
plt.figure(figsize=(12, 10))
sns.heatmap(df[features].corr(), annot=True, cmap='coolwarm', fmt='.2f')
plt.title("Correlation Heatmap")
plt.show()
